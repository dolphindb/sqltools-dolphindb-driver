{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "DolphinDB Python",
    "scopeName": "source.dolphindb-python",
    "patterns": [
        {
            "match": "\\.\\.\\.",
            "name": "invalid.ellipsis.dolphindb"
        },
        {
            "include": "#keyword"
        },
        {
            "include": "#literal"
        },
        {
            "include": "#comment"
        },
        {
            "include": "#decorator"
        },
        {
            "include": "#variable"
        },
        {
            "include": "#operator"
        },
        {
            "include": "#method_call"
        },
        {
            "include": "#function_call"
        },
        {
            "include": "#property"
        },
        {
            "match": ";",
            "name": "punctuation.terminator.statement.dolphindb"
        },
        {
            "match": ",",
            "name": "punctuation.separator.commma.dolphindb"
        }
    ],
    "repository": {
        "keyword": {
            "match": "\\b(?<![.$])(right outer join|RIGHT OUTER JOIN|create database|full outer join|left outer join|CREATE DATABASE|FULL OUTER JOIN|LEFT OUTER JOIN|left semi join|partitioned by|LEFT SEMI JOIN|PARTITIONED BY|drop database|left semijoin|DROP DATABASE|LEFT SEMIJOIN|create table|partition by|CREATE TABLE|PARTITION BY|insert into|alter table|use catalog|transaction|is not null|nulls first|INSERT INTO|ALTER TABLE|USE CATALOG|TRANSACTION|IS NOT NULL|NULLS FIRST|drop table|inner join|right join|cross join|context by|nulls last|DROP TABLE|INNER JOIN|RIGHT JOIN|CROSS JOIN|CONTEXT BY|NULLS LAST|full join|left join|cgroup by|union all|FULL JOIN|LEFT JOIN|CGROUP BY|UNION ALL|continue|nonlocal|group by|pivot by|order by|distinct|GROUP BY|PIVOT BY|ORDER BY|DISTINCT|mutable|finally|between|is null|BETWEEN|IS NULL|assert|return|module|except|global|import|lambda|select|update|insert|rename|delete|having|values|exists|SELECT|UPDATE|INSERT|RENAME|DELETE|HAVING|VALUES|EXISTS|const|timer|while|break|catch|throw|async|await|class|raise|yield|csort|limit|where|union|CSORT|LIMIT|WHERE|UNION|defg|mapr|elif|pass|exec|drop|join|into|from|with|like|case|when|then|else|desc|EXEC|DROP|JOIN|INTO|FROM|WITH|LIKE|CASE|WHEN|THEN|ELSE|DESC|def|for|try|use|del|add|top|set|not|map|and|end|asc|ADD|TOP|SET|NOT|MAP|AND|END|ASC|do|go|is|to|as|in|or|on|if|TO|AS|IN|OR|ON|IF)(?!(\\s*:|\\())\\b",
            "name": "keyword.control.dolphindb"
        },
        "literal": {
            "patterns": [
                {
                    "include": "#constant"
                },
                {
                    "include": "#datetime"
                },
                {
                    "include": "#string"
                },
                {
                    "include": "#number"
                }
            ]
        },
        "constant": {
            "match": "\\b(?<![.$])(DFLT|NULL|true|false|pi|e|SCALAR|VECTOR|PAIR|MATRIX|SET|DICT|TABLE|VOID|BOOL|CHAR|SHORT|INT|INDEX|LONG|DATE|MONTH|TIME|MINUTE|SECOND|DATETIME|TIMESTAMP|NANOTIME|NANOTIMESTAMP|FLOAT|DOUBLE|SYMBOL|STRING|UUID|FUNCTIONDEF|HANDLE|CODE|DATASOURCE|RESOURCE|ANY|DICTIONARY|DATEHOUR|IPADDR|INT128|BLOB|COMPLEX|POINT|DURATION|OBJECT|DECIMAL32|DECIMAL64|DECIMAL128|IOTANY|SEQ|RANGE|HASH|VALUE|LIST|COMPO|VAR|SHARED|DEF|GLOBAL|TABLE_READ|TABLE_WRITE|TABLE_INSERT|TABLE_UPDATE|TABLE_DELETE|DBOBJ_CREATE|DBOBJ_DELETE|DB_DELETE|DB_INSERT|DB_MANAGE|DB_OWNER|DB_READ|DB_UPDATE|DB_WRITE|CATALOG_MANAGE|CATALOG_READ|CATALOG_WRITE|CATALOG_INSERT|CATALOG_UPDATE|CATALOG_DELETE|SCHEMA_MANAGE|SCHEMAOBJ_CREATE|SCHEMAOBJ_DELETE|SCHEMA_READ|SCHEMA_WRITE|SCHEMA_INSERT|SCHEMA_UPDATE|SCHEMA_DELETE|SCRIPT_EXEC|TASK_GROUP_MEM_LIMIT|TEST_EXEC|VIEW_EXEC|VIEW_OWNER|QUERY_RESULT_MEM_LIMIT|HINT_HASH|HINT_SNAPSHOT|HINT_KEEPORDER|HINT_SEQ|HINT_EXPLAIN|HINT_VECTORIZED|HEAD|CURRENT|TAIL|LINE|PIE|COLUMN|BAR|AREA|SCATTER|HISTOGRAM|KLINE|DEBUG|INFO|WARNING|ERROR|FIRST|LAST|ALL|NONE|HASH_PTN|True|False|None)(?!\\s*:)\\b",
            "name": "constant.language.int.dolphindb"
        },
        "decorator": {
            "match": "^@(testing|state|transform|jit)",
            "name": "meta.decorator.dolphindb"
        },
        "datetime": {
            "patterns": [
                {
                    "match": "\\b[0-9]{4}[.][0-9]{2}[.][0-9]{2}[T ][0-9]{2}:[0-9]{2}:[0-9]{2}([.][0-9]{3,9})?\\b",
                    "name": "constant.numeric.datetime.datetime.dolphindb"
                },
                {
                    "match": "\\b[0-9]{4}\\.[0-9]{2}M\\b",
                    "name": "constant.numeric.datetime.month.dolphindb"
                },
                {
                    "match": "\\b[0-9]{4}\\.[0-9]{2}\\.[0-9]{2}\\b",
                    "name": "constant.numeric.datetime.date.dolphindb"
                },
                {
                    "match": "\\b[0-9]{2}:[0-9]{2}:[0-9]{2}([.][0-9]{3,9})?\\b",
                    "name": "constant.numeric.datetime.time.dolphindb"
                },
                {
                    "match": "\\b[0-9]{2}:[0-9]{2}m\\b",
                    "name": "constant.numeric.datetime.minute.dolphindb"
                }
            ]
        },
        "string": {
            "patterns": [
                {
                    "include": "#string_single_quoted"
                },
                {
                    "include": "#string_double_quoted"
                },
                {
                    "begin": "'''",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.dolphindb"
                        }
                    },
                    "end": "'''",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.end.dolphindb"
                        }
                    },
                    "name": "string.quoted.single.heredoc.dolphindb",
                    "patterns": [
                        {
                            "captures": {
                                "1": {
                                    "name": "punctuation.definition.escape.backslash.dolphindb"
                                }
                            },
                            "match": "(\\\\).",
                            "name": "constant.character.escape.backslash.dolphindb"
                        }
                    ]
                },
                {
                    "begin": "\"\"\"",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.dolphindb"
                        }
                    },
                    "end": "\"\"\"",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.end.dolphindb"
                        }
                    },
                    "name": "string.quoted.double.heredoc.dolphindb",
                    "patterns": [
                        {
                            "captures": {
                                "1": {
                                    "name": "punctuation.definition.escape.backslash.dolphindb"
                                }
                            },
                            "match": "(\\\\).",
                            "name": "constant.character.escape.backslash.dolphindb"
                        },
                        {
                            "include": "#interpolated_dolphindb"
                        }
                    ]
                },
                {
                    "match": "`[\\w\\.]*",
                    "name": "string.quoted.other.dolphindb"
                }
            ]
        },
        "number": {
            "patterns": [
                {
                    "match": "\\b[01]+[bB]\\b",
                    "name": "constant.numeric.binary.dolphindb"
                },
                {
                    "match": "\\b[0-9]+([clhsmyM]|ms)\\b",
                    "name": "constant.numeric.dolphindb"
                },
                {
                    "match": "\\b[0-9]+(\\.[0-9]+)?f\\b",
                    "name": "constant.numeric.dolphindb"
                },
                {
                    "match": "(?x)\n(?:\n  (?:\\b[0-9]+(\\.)[0-9]+[eE][+-]?[0-9]+\\b)| # 1.1E+3\n  (?:\\b[0-9]+(\\.)[eE][+-]?[0-9]+\\b)|       # 1.E+3\n  (?:\\b(\\.)[0-9]+[eE][+-]?[0-9]+\\b)|       # .1E+3\n  (?:\\b[0-9]+[eE][+-]?[0-9]+\\b)|            # 1E+3\n  (?:\\b[0-9]+(\\.)[0-9]+\\b)|                # 1.1\n  (?:\\b[0-9]+(?=\\.{2,3}))|                  # 1 followed by a slice\n  (?:\\b[0-9]+(\\.)\\b)|                      # 1.\n  (?:\\b(\\.)[0-9]+\\b)|                      # .1\n  (?:\\b[0-9]+\\b(?!\\.))                     # 1\n)\n",
                    "captures": {
                        "0": {
                            "name": "constant.numeric.decimal.dolphindb"
                        },
                        "1": {
                            "name": "punctuation.separator.decimal.period.dolphindb"
                        },
                        "2": {
                            "name": "punctuation.separator.decimal.period.dolphindb"
                        },
                        "3": {
                            "name": "punctuation.separator.decimal.period.dolphindb"
                        },
                        "4": {
                            "name": "punctuation.separator.decimal.period.dolphindb"
                        },
                        "5": {
                            "name": "punctuation.separator.decimal.period.dolphindb"
                        },
                        "6": {
                            "name": "punctuation.separator.decimal.period.dolphindb"
                        }
                    }
                }
            ]
        },
        "string_single_quoted": {
            "patterns": [
                {
                    "begin": "'",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.dolphindb"
                        }
                    },
                    "end": "'",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.end.dolphindb"
                        }
                    },
                    "name": "string.quoted.single.dolphindb",
                    "patterns": [
                        {
                            "captures": {
                                "1": {
                                    "name": "punctuation.definition.escape.backslash.dolphindb"
                                }
                            },
                            "match": "(\\\\)(x[0-9A-Fa-f]{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)",
                            "name": "constant.character.escape.backslash.dolphindb"
                        }
                    ]
                }
            ]
        },
        "string_double_quoted": {
            "patterns": [
                {
                    "begin": "\"",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.dolphindb"
                        }
                    },
                    "end": "\"",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.end.dolphindb"
                        }
                    },
                    "name": "string.quoted.double.dolphindb",
                    "patterns": [
                        {
                            "captures": {
                                "1": {
                                    "name": "punctuation.definition.escape.backslash.dolphindb"
                                }
                            },
                            "match": "(\\\\)(x[0-9A-Fa-f]{2}|[0-2][0-7]{0,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|.)",
                            "name": "constant.character.escape.backslash.dolphindb"
                        },
                        {
                            "include": "#interpolated_dolphindb"
                        }
                    ]
                }
            ]
        },
        "function_call": {
            "patterns": [
                {
                    "begin": "(@)?(\\w+!?)(?=\\s*\\()",
                    "beginCaptures": {
                        "1": {
                            "name": "variable.other.readwrite.instance.dolphindb"
                        },
                        "2": {
                            "patterns": [
                                {
                                    "include": "#function_name"
                                }
                            ]
                        }
                    },
                    "end": "(?<=\\))",
                    "name": "meta.function-call.dolphindb",
                    "patterns": [
                        {
                            "include": "#arguments"
                        }
                    ]
                }
            ]
        },
        "method_call": {
            "patterns": [
                {
                    "begin": "(?:(\\.)|(::))\\s*(\\w*!?)(?=\\()",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.separator.method.period.dolphindb"
                        },
                        "2": {
                            "name": "keyword.operator.prototype.dolphindb"
                        },
                        "3": {
                            "patterns": [
                                {
                                    "include": "#function_name"
                                }
                            ]
                        }
                    },
                    "end": "(?<=\\))",
                    "name": "meta.method-call.dolphindb",
                    "patterns": [
                        {
                            "include": "#arguments"
                        }
                    ]
                }
            ]
        },
        "function_name": {
            "patterns": [
                {
                    "match": "[^\\d\\W]\\w*!?",
                    "name": "entity.name.function.dolphindb"
                },
                {
                    "match": "\\d[\\w]*",
                    "name": "invalid.illegal.identifier.dolphindb"
                }
            ]
        },
        "function_params": {
            "patterns": [
                {
                    "begin": "\\(",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.parameters.begin.bracket.round.dolphindb"
                        }
                    },
                    "end": "\\)",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.parameters.end.bracket.round.dolphindb"
                        }
                    },
                    "name": "meta.parameters.dolphindb",
                    "patterns": [
                        {
                            "include": "#variable"
                        },
                        {
                            "match": "(@(?:[a-zA-Z_$][\\w$]*)?)(\\.\\.\\.)?",
                            "captures": {
                                "1": {
                                    "name": "variable.parameter.function.readwrite.instance.dolphindb"
                                },
                                "2": {
                                    "name": "keyword.operator.splat.dolphindb"
                                }
                            }
                        },
                        {
                            "include": "$self"
                        }
                    ]
                }
            ]
        },
        "comment": {
            "patterns": [
                {
                    "begin": "#",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.dolphindb"
                        }
                    },
                    "end": "$",
                    "name": "comment.line.number-sign.dolphindb"
                }
            ]
        },
        "arguments": {
            "patterns": [
                {
                    "begin": "\\(",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.arguments.begin.bracket.round.dolphindb"
                        }
                    },
                    "end": "\\)",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.arguments.end.bracket.round.dolphindb"
                        }
                    },
                    "name": "meta.arguments.dolphindb",
                    "patterns": [
                        {
                            "include": "$self"
                        },
                        {
                            "include": "#literal"
                        },
                        {
                            "include": "#variable"
                        }
                    ]
                }
            ]
        },
        "variable": {
            "patterns": [
                {
                    "match": "(@)([a-zA-Z_\\$]\\w*)?",
                    "name": "variable.other.readwrite.instance.dolphindb"
                }
            ]
        },
        "interpolated_dolphindb": {
            "patterns": [
                {
                    "begin": "\\#\\{",
                    "captures": {
                        "0": {
                            "name": "punctuation.section.embedded.dolphindb"
                        }
                    },
                    "end": "\\}",
                    "name": "source.dolphindb.embedded.source",
                    "patterns": [
                        {
                            "include": "$self"
                        }
                    ]
                }
            ]
        },
        "operator": {
            "patterns": [
                {
                    "match": "<<|>>",
                    "name": "keyword.operator.bitwise.shift.dolphindb"
                },
                {
                    "match": "!=|<=|>=|==|>|<",
                    "name": "keyword.operator.comparison.dolphindb"
                },
                {
                    "match": "<-|->",
                    "name": "keyword.operator.join.dolphindb"
                },
                {
                    "match": "&&|!|\\|\\|",
                    "name": "keyword.operator.logical.dolphindb"
                },
                {
                    "match": "&|\\||\\^",
                    "name": "keyword.operator.bitwise.dolphindb"
                },
                {
                    "match": "\\.\\.",
                    "name": "keyword.operator.splat.dolphindb"
                },
                {
                    "match": "\\?",
                    "name": "keyword.operator.existential.dolphindb"
                },
                {
                    "match": "/|<-|%|\\*|/|-|\\$|\\+",
                    "name": "keyword.operator.dolphindb"
                },
                {
                    "match": "([a-zA-Z$_][\\w$]*)?\\s*(=|:(?!:))(?![>=])",
                    "captures": {
                        "1": {
                            "name": "variable.assignment.dolphindb"
                        },
                        "2": {
                            "name": "keyword.operator.assignment.dolphindb"
                        }
                    }
                }
            ]
        },
        "property": {
            "patterns": [
                {
                    "match": "(?:(\\.)|(::))\\s*([A-Z][A-Z0-9_$]*\\b\\$*)(?=\\s*\\??(\\.\\s*[a-zA-Z_$]\\w*|::))",
                    "captures": {
                        "1": {
                            "name": "punctuation.separator.property.period.dolphindb"
                        },
                        "2": {
                            "name": "keyword.operator.prototype.dolphindb"
                        },
                        "3": {
                            "name": "constant.other.object.property.dolphindb"
                        }
                    }
                },
                {
                    "match": "(?:(\\.)|(::))\\s*(\\$*[a-zA-Z_$][\\w$]*)(?=\\s*\\??(\\.\\s*[a-zA-Z_$]\\w*|::))",
                    "captures": {
                        "1": {
                            "name": "punctuation.separator.property.period.dolphindb"
                        },
                        "2": {
                            "name": "keyword.operator.prototype.dolphindb"
                        },
                        "3": {
                            "name": "variable.other.object.property.dolphindb"
                        }
                    }
                },
                {
                    "match": "(?:(\\.)|(::))\\s*([A-Z][A-Z0-9_$]*\\b\\$*)",
                    "captures": {
                        "1": {
                            "name": "punctuation.separator.property.period.dolphindb"
                        },
                        "2": {
                            "name": "keyword.operator.prototype.dolphindb"
                        },
                        "3": {
                            "name": "constant.other.property.dolphindb"
                        }
                    }
                },
                {
                    "match": "(?:(\\.)|(::))\\s*(\\$*[a-zA-Z_$][\\w$]*)",
                    "captures": {
                        "1": {
                            "name": "punctuation.separator.property.period.dolphindb"
                        },
                        "2": {
                            "name": "keyword.operator.prototype.dolphindb"
                        },
                        "3": {
                            "name": "variable.other.property.dolphindb"
                        }
                    }
                },
                {
                    "match": "(?:(\\.)|(::))\\s*([0-9][\\w$]*)",
                    "captures": {
                        "1": {
                            "name": "punctuation.separator.property.period.dolphindb"
                        },
                        "2": {
                            "name": "keyword.operator.prototype.dolphindb"
                        },
                        "3": {
                            "name": "invalid.illegal.identifier.dolphindb"
                        }
                    }
                }
            ]
        }
    }
}
